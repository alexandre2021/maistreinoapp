// app/rotinas/[id].tsx - VERSÃO FINAL COM useEffect CORRIGIDO
import { Ionicons } from '@expo/vector-icons';
import { useLocalSearchParams, useRouter } from 'expo-router';
import React, { useCallback, useEffect, useState } from 'react';
import {
  FlatList,
  RefreshControl,
  StyleSheet,
  Text,
  TouchableOpacity,
  View
} from 'react-native';

import { ErrorModal } from '../../components/ErrorModal';
import { SuccessModal } from '../../components/SuccessModal';
import { AtivarRotinaModal } from '../../components/rotina/AtivarRotinaModal';
import { ConfirmActionModal } from '../../components/rotina/ConfirmActionModal';
import { RotinaAtivaModal } from '../../components/rotina/RotinaAtivaModal';
import { RotinaOptionsModal } from '../../components/rotina/RotinaOptionsModal';
import { useModalManager } from '../../hooks/useModalManager';
import { supabase } from '../../lib/supabase';

// ✅ TYPES ATUALIZADOS
interface Aluno {
  id: string;
  nome_completo: string;
  email: string;
}

interface Rotina {
  id: string;
  nome: string;
  descricao?: string;
  treinos_por_semana: number;
  dificuldade: string;
  duracao_semanas: number;
  valor_total: number;
  data_inicio: string;
  status: string; // Agora armazena o texto legível: 'Aguardando pagamento' | 'Ativa' | 'Pausada' | 'Concluída'
  created_at: string;
  permite_execucao_aluno: boolean;
}

export default function RotinasAlunoScreen() {
  const router = useRouter();
  const { id: alunoId } = useLocalSearchParams<{ id: string }>();

  // ✅ ESTADOS
  const [aluno, setAluno] = useState<Aluno | null>(null);
  const [rotinas, setRotinas] = useState<Rotina[]>([]);
  const [loading, setLoading] = useState(true);
  const [refreshing, setRefreshing] = useState(false);
  const [abaAtiva, setAbaAtiva] = useState<'atual' | 'concluidas'>('atual');
  
  // ✅ ESTADO PARA ROTINA CONFLITANTE
  const [rotinaConflitante, setRotinaConflitante] = useState<{
    id: string;
    nome: string;
    status: string;
  } | null>(null);

  // ✅ ESTADOS PARA ATIVAÇÃO DE ROTINA
  const [rotinaParaAtivar, setRotinaParaAtivar] = useState<Rotina | null>(null);
  const [permiteExecucaoAluno, setPermiteExecucaoAluno] = useState(true);
  const [enviaResumoEmail, setEnviaResumoEmail] = useState(false);

  // ✅ ESTADO PARA MENU DE OPÇÕES
  const [rotinaComOpcoes, setRotinaComOpcoes] = useState<Rotina | null>(null);

  // ✅ ESTADOS PARA MODAIS
  const [errorModal, setErrorModal] = useState<{ title: string; message: string } | null>(null);
  const [successModal, setSuccessModal] = useState<{ title: string; message: string } | null>(null);
  const [confirmModal, setConfirmModal] = useState<{
    title: string;
    message: string;
    confirmText: string;
    destructive: boolean;
    onConfirm: () => void;
  } | null>(null);
  const [actionLoading, setActionLoading] = useState(false);

  // ✅ MODAL MANAGER
  const { modals, openModal, closeModal } = useModalManager({
    rotinaAtiva: false,
    ativarRotina: false,
    opcoes: false,
    error: false,
    success: false,
    confirm: false
  });

  // ✅ FUNÇÕES AUXILIARES PARA MODAIS
  const showError = useCallback((title: string, message: string) => {
    setErrorModal({ title, message });
    openModal('error');
  }, [openModal]);

  const showSuccess = useCallback((title: string, message: string) => {
    setSuccessModal({ title, message });
    openModal('success');
  }, [openModal]);

  const showConfirm = useCallback((
    title: string,
    message: string,
    confirmText: string,
    onConfirm: () => void,
    destructive: boolean = false
  ) => {
    setConfirmModal({ title, message, confirmText, destructive, onConfirm });
    openModal('confirm');
  }, [openModal]);

  const handleCloseError = useCallback(() => {
    closeModal('error');
    setErrorModal(null);
  }, [closeModal]);

  const handleCloseSuccess = useCallback(() => {
    closeModal('success');
    setSuccessModal(null);
  }, [closeModal]);

  const handleCloseConfirm = useCallback(() => {
    closeModal('confirm');
    setConfirmModal(null);
  }, [closeModal]);

  const handleConfirmAction = useCallback(async () => {
    if (!confirmModal) return;
    
    setActionLoading(true);
    try {
      await confirmModal.onConfirm();
    } catch (error) {
      console.error('Erro na ação:', error);
    } finally {
      setActionLoading(false);
    }
  }, [confirmModal]);

  // ✅ CARREGAR DADOS - VERSÃO CORRIGIDA SEM WARNINGS
  useEffect(() => {
    // ✅ BUSCAR ALUNO - MOVIDA PARA DENTRO DO useEffect
    const fetchAluno = async () => {
      if (!alunoId) return;

      try {
        const { data: { user }, error: authError } = await supabase.auth.getUser();
        if (authError || !user) return;

        const { data: alunoData, error: alunoError } = await supabase
          .from('alunos')
          .select('id, nome_completo, email')
          .eq('id', alunoId)
          .eq('personal_trainer_id', user.id)
          .single();

        if (alunoError || !alunoData) {
          showError('Erro', 'Aluno não encontrado');
          router.back();
          return;
        }

        setAluno(alunoData);
      } catch (error) {
        console.error('Erro ao buscar aluno:', error);
      }
    };

    // ✅ BUSCAR ROTINAS - MOVIDA PARA DENTRO DO useEffect  
    const fetchRotinas = async () => {
      if (!alunoId) return;

      try {
        const { data: { user }, error: authError } = await supabase.auth.getUser();
        if (authError || !user) return;

        const { data: rotinasData, error: rotinasError } = await supabase
          .from('rotinas')
          .select(`
            id,
            nome,
            descricao,
            treinos_por_semana,
            dificuldade,
            duracao_semanas,
            valor_total,
            data_inicio,
            status,
            permite_execucao_aluno,
            created_at
          `)
          .eq('aluno_id', alunoId)
          .eq('personal_trainer_id', user.id)
          .order('created_at', { ascending: false });

        if (rotinasError) {
          console.error('Erro ao buscar rotinas:', rotinasError);
          return;
        }

        setRotinas(rotinasData || []);
      } catch (error) {
        console.error('Erro ao buscar rotinas:', error);
      }
    };

    const loadData = async () => {
      try {
        await Promise.all([fetchAluno(), fetchRotinas()]);
      } catch (error) {
        console.error('Erro ao carregar dados:', error);
      } finally {
        setLoading(false);
      }
    };
    
    loadData();
  }, [alunoId, router, showError]); // ✅ Incluindo showError como dependência

  // ✅ REFRESH - MANTÉM FUNÇÕES SEPARADAS PARA REUSO
  const handleRefresh = async () => {
    setRefreshing(true);
    
    // ✅ BUSCAR ALUNO - PARA REFRESH
    const fetchAluno = async () => {
      if (!alunoId) return;

      try {
        const { data: { user }, error: authError } = await supabase.auth.getUser();
        if (authError || !user) return;

        const { data: alunoData, error: alunoError } = await supabase
          .from('alunos')
          .select('id, nome_completo, email')
          .eq('id', alunoId)
          .eq('personal_trainer_id', user.id)
          .single();

        if (alunoError || !alunoData) {
          showError('Erro', 'Aluno não encontrado');
          router.back();
          return;
        }

        setAluno(alunoData);
      } catch (error) {
        console.error('Erro ao buscar aluno:', error);
      }
    };

    // ✅ BUSCAR ROTINAS - PARA REFRESH
    const fetchRotinas = async () => {
      if (!alunoId) return;

      try {
        const { data: { user }, error: authError } = await supabase.auth.getUser();
        if (authError || !user) return;

        const { data: rotinasData, error: rotinasError } = await supabase
          .from('rotinas')
          .select(`
            id,
            nome,
            descricao,
            treinos_por_semana,
            dificuldade,
            duracao_semanas,
            valor_total,
            data_inicio,
            status,
            permite_execucao_aluno,
            created_at
          `)
          .eq('aluno_id', alunoId)
          .eq('personal_trainer_id', user.id)
          .order('created_at', { ascending: false });

        if (rotinasError) {
          console.error('Erro ao buscar rotinas:', rotinasError);
          return;
        }

        setRotinas(rotinasData || []);
      } catch (error) {
        console.error('Erro ao buscar rotinas:', error);
      }
    };

    await Promise.all([fetchAluno(), fetchRotinas()]);
    setRefreshing(false);
  };

  // ✅ FUNÇÃO HELPER PARA ATUALIZAR APENAS ROTINAS
  const refetchRotinas = async () => {
    if (!alunoId) return;

    try {
      const { data: { user }, error: authError } = await supabase.auth.getUser();
      if (authError || !user) return;

      const { data: rotinasData, error: rotinasError } = await supabase
        .from('rotinas')
        .select(`
          id,
          nome,
          descricao,
          treinos_por_semana,
          dificuldade,
          duracao_semanas,
          valor_total,
          data_inicio,
          status,
          permite_execucao_aluno,
          created_at
        `)
        .eq('aluno_id', alunoId)
        .eq('personal_trainer_id', user.id)
        .order('created_at', { ascending: false });

      if (rotinasError) {
        console.error('Erro ao buscar rotinas:', rotinasError);
        return;
      }

      setRotinas(rotinasData || []);
    } catch (error) {
      console.error('Erro ao buscar rotinas:', error);
    }
  };

  // ✅ VALIDAR ANTES DE CRIAR NOVA ROTINA - COM MODAL
  const handleNovaRotina = async () => {
    if (!alunoId) return;

    try {
      const { data: { user }, error: authError } = await supabase.auth.getUser();
      if (authError || !user) return;

      // ✅ VERIFICAR SE JÁ TEM ROTINA ATIVA/PAUSADA/AGUARDANDO PAGAMENTO
      const { data: rotinaAtiva, error: checkError } = await supabase
        .from('rotinas')
        .select('id, nome, status')
        .eq('aluno_id', alunoId)
        .eq('personal_trainer_id', user.id)
        .in('status', ['Aguardando pagamento', 'Ativa', 'Pausada'])
        .limit(1);

      if (checkError) {
        console.error('Erro ao verificar rotinas:', checkError);
        showError('Erro', 'Não foi possível verificar rotinas existentes');
        return;
      }

      if (rotinaAtiva && rotinaAtiva.length > 0) {
        // ✅ USAR MODAL AO INVÉS DE ALERT
        const rotina = rotinaAtiva[0];
        setRotinaConflitante(rotina);
        openModal('rotinaAtiva');
        return;
      }

      // ✅ SE NÃO TEM ROTINA ATIVA, PODE CRIAR
      router.push(`/criar-rotina?alunoId=${alunoId}`);
    } catch (error) {
      console.error('Erro ao validar nova rotina:', error);
      showError('Erro', 'Não foi possível verificar rotinas existentes');
    }
  };

  // ✅ AÇÃO PARA VER ROTINA ATIVA
  const handleViewRotinaAtiva = () => {
    closeModal('rotinaAtiva');
    if (rotinaConflitante) {
      // TODO: Navegar para detalhes da rotina quando tela estiver pronta
      console.log('Navegar para rotina:', rotinaConflitante.id);
      // router.push(`/rotina-detalhes/${rotinaConflitante.id}`);
    }
  };

  // ✅ FECHAR MODAL
  const handleCloseRotinaAtivaModal = () => {
    closeModal('rotinaAtiva');
    setRotinaConflitante(null);
  };

  // ✅ AÇÕES DA ROTINA
  const handleRotinaPress = (rotina: Rotina) => {
    console.log('Ver rotina:', rotina.id);
    // TODO: Navegar para detalhes quando tela estiver pronta
  };

  // ✅ NOVA FUNCIONALIDADE: Ativar rotina aguardando pagamento
  const handleAtivarRotina = (rotina: Rotina) => {
    console.log('🔍 DEBUG: handleAtivarRotina chamada para rotina:', rotina.nome);
    
    showConfirm(
      'Ativar Rotina',
      `Confirmar que o pagamento foi efetuado e ativar a rotina "${rotina.nome}"?`,
      'Ativar',
      () => {
        console.log('🔍 DEBUG: Usuário confirmou ativação, abrindo modal...');
        // Mostrar modal com opções adicionais
        setRotinaParaAtivar(rotina);
        openModal('ativarRotina');
        console.log('🔍 DEBUG: Modal deveria estar aberto agora. Estado:', {
          rotinaParaAtivar: rotina.nome,
          modalAtivo: 'ativarRotina'
        });
      }
    );
  };

  // ✅ CONFIRMAR ATIVAÇÃO COM OPÇÕES
  const handleConfirmarAtivacao = async () => {
    if (!rotinaParaAtivar) return;

    try {
      const { error } = await supabase
        .from('rotinas')
        .update({ 
          status: 'Ativa',
          permite_execucao_aluno: permiteExecucaoAluno,
          // TODO: Adicionar campo de envio de email quando disponível
        })
        .eq('id', rotinaParaAtivar.id);

      if (error) throw error;

      // TODO: Implementar envio de email se necessário
      if (enviaResumoEmail) {
        console.log('Enviando resumo por email...');
        // Implementar envio de email
      }

      showSuccess('Sucesso', 'Rotina ativada com sucesso!');
      closeModal('ativarRotina');
      setRotinaParaAtivar(null);
      await refetchRotinas();
    } catch (error) {
      console.error('Erro ao ativar rotina:', error);
      showError('Erro', 'Não foi possível ativar a rotina');
    }
  };

  // ✅ AÇÕES PARA ROTINAS ATIVAS
  const handlePausarRotina = async (rotina: Rotina) => {
    showConfirm(
      'Pausar Rotina',
      `Tem certeza que deseja pausar a rotina "${rotina.nome}"?`,
      'Pausar',
      async () => {
        try {
          const { error } = await supabase
            .from('rotinas')
            .update({ status: 'Pausada' })
            .eq('id', rotina.id);

          if (error) throw error;

          showSuccess('Sucesso', 'Rotina pausada com sucesso!');
          await refetchRotinas();
        } catch (error) {
          console.error('Erro ao pausar rotina:', error);
          showError('Erro', 'Não foi possível pausar a rotina');
        }
      },
      true // destructive
    );
  };

  const handleExcluirRotina = async (rotina: Rotina) => {
    showConfirm(
      'Excluir Rotina',
      `Tem certeza que deseja excluir a rotina "${rotina.nome}"? Esta ação não pode ser desfeita.`,
      'Excluir',
      async () => {
        try {
          console.log('🗑️ Iniciando exclusão da rotina:', rotina.id);
          
          const { error } = await supabase
            .from('rotinas')
            .delete()
            .eq('id', rotina.id);

          if (error) {
            console.error('❌ Erro ao excluir rotina:', error);
            throw error;
          }

          console.log('✅ Rotina excluída com sucesso');
          showSuccess('Sucesso', 'Rotina excluída com sucesso!');
          await refetchRotinas();
        } catch (error) {
          console.error('❌ Erro ao excluir rotina:', error);
          showError('Erro', 'Não foi possível excluir a rotina');
        }
      },
      true // destructive
    );
  };

  // ✅ AÇÕES PARA ROTINAS PAUSADAS
  const handleReativarRotina = async (rotina: Rotina) => {
    showConfirm(
      'Reativar Rotina',
      `Tem certeza que deseja reativar a rotina "${rotina.nome}"?`,
      'Reativar',
      async () => {
        try {
          const { error } = await supabase
            .from('rotinas')
            .update({ status: 'Ativa' })
            .eq('id', rotina.id);

          if (error) throw error;

          showSuccess('Sucesso', 'Rotina reativada com sucesso!');
          await refetchRotinas();
        } catch (error) {
          console.error('Erro ao reativar rotina:', error);
          showError('Erro', 'Não foi possível reativar a rotina');
        }
      }
    );
  };

  // ✅ AÇÕES DO MENU DE OPÇÕES
  const handleMostrarOpcoes = (rotina: Rotina) => {
    setRotinaComOpcoes(rotina);
    openModal('opcoes');
  };

  const handleIrParaExecucao = () => {
    closeModal('opcoes');
    if (rotinaComOpcoes) {
      // TODO: Implementar navegação para execução
      console.log('Ir para execução da rotina:', rotinaComOpcoes.id);
    }
  };

  const handleVerEvolucao = () => {
    closeModal('opcoes');
    if (rotinaComOpcoes) {
      // TODO: Implementar navegação para evolução
      console.log('Ver evolução da rotina:', rotinaComOpcoes.id);
    }
  };

  const handleDuplicarRotina = () => {
    closeModal('opcoes');
    if (rotinaComOpcoes) {
      // TODO: Implementar duplicação de rotina
      console.log('Duplicar rotina:', rotinaComOpcoes.id);
    }
  };

  // ✅ HELPER FUNCTIONS
  const getStatusColor = (status: string) => {
    switch (status) {
      case 'Aguardando pagamento': return '#F59E0B';
      case 'Ativa': return '#10B981';
      case 'Pausada': return '#6B7280';
      case 'Concluída': return '#3B82F6';
      default: return '#9CA3AF';
    }
  };

  const getStatusLabel = (status: string) => {
    return status; // Agora o status já é o texto legível
  };

  // ✅ FILTRAR ROTINAS POR ABA
  const rotinasFiltradas = rotinas.filter(rotina => {
    if (abaAtiva === 'atual') {
      return ['Aguardando pagamento', 'Ativa', 'Pausada'].includes(rotina.status);
    } else {
      return rotina.status === 'Concluída';
    }
  });

  // ✅ RENDERIZAR ROTINA
  const renderRotina = ({ item }: { item: Rotina }) => {
    const totalSessoes = item.treinos_por_semana * item.duracao_semanas;
    
    return (
      <TouchableOpacity
        style={styles.rotinaCard}
        onPress={() => handleRotinaPress(item)}
      >
        {/* Linha 1: Badge do status */}
        <View style={styles.statusRow}>
          <View style={[styles.statusBadge, { backgroundColor: getStatusColor(item.status) }]}>
            <Text style={styles.statusText}>{getStatusLabel(item.status)}</Text>
          </View>
        </View>

        {/* Linha 2: Nome da rotina */}
        <Text style={styles.rotinaNome}>{item.nome}</Text>

        {/* Linha 3: Frequência, duração e quantidade de sessões */}
        <Text style={styles.rotinaInfo}>
          {item.treinos_por_semana}x por semana • {item.duracao_semanas} semanas • {totalSessoes} sessões
        </Text>

        {/* Descrição se houver */}
        {item.descricao && (
          <Text style={styles.descricao} numberOfLines={2}>
            {item.descricao}
          </Text>
        )}

        {/* Linha 4: Botões de ação conforme o status */}
        {item.status === 'Aguardando pagamento' && (
          <View style={styles.acaoRow}>
            <View style={styles.botoesAcao}>
              <TouchableOpacity
                style={styles.ativarButton}
                onPress={() => handleAtivarRotina(item)}
              >
                <Ionicons name="checkmark-circle" size={16} color="white" />
                <Text style={styles.ativarButtonText}>Ativar</Text>
              </TouchableOpacity>
              <TouchableOpacity
                style={styles.excluirButton}
                onPress={() => handleExcluirRotina(item)}
              >
                <Ionicons name="trash" size={16} color="white" />
                <Text style={styles.excluirButtonText}>Excluir</Text>
              </TouchableOpacity>
            </View>
          </View>
        )}

        {item.status === 'Ativa' && (
          <View style={styles.acaoRow}>
            <View style={styles.botoesAcao}>
              <TouchableOpacity
                style={styles.pausarButton}
                onPress={() => handlePausarRotina(item)}
              >
                <Ionicons name="pause" size={16} color="white" />
                <Text style={styles.pausarButtonText}>Pausar</Text>
              </TouchableOpacity>
              <TouchableOpacity
                style={styles.excluirButton}
                onPress={() => handleExcluirRotina(item)}
              >
                <Ionicons name="trash" size={16} color="white" />
                <Text style={styles.excluirButtonText}>Excluir</Text>
              </TouchableOpacity>
            </View>
            <TouchableOpacity
              style={styles.optionsButton}
              onPress={() => handleMostrarOpcoes(item)}
            >
              <Ionicons name="ellipsis-vertical" size={16} color="#6B7280" />
            </TouchableOpacity>
          </View>
        )}

        {item.status === 'Pausada' && (
          <View style={styles.acaoRow}>
            <View style={styles.botoesAcao}>
              <TouchableOpacity
                style={styles.ativarButton}
                onPress={() => handleReativarRotina(item)}
              >
                <Ionicons name="play" size={16} color="white" />
                <Text style={styles.ativarButtonText}>Ativar</Text>
              </TouchableOpacity>
              <TouchableOpacity
                style={styles.excluirButton}
                onPress={() => handleExcluirRotina(item)}
              >
                <Ionicons name="trash" size={16} color="white" />
                <Text style={styles.excluirButtonText}>Excluir</Text>
              </TouchableOpacity>
            </View>
          </View>
        )}

        {item.status === 'Concluída' && (
          <View style={styles.acaoRow}>
            <TouchableOpacity
              style={styles.optionsButton}
              onPress={() => handleMostrarOpcoes(item)}
            >
              <Ionicons name="ellipsis-vertical" size={16} color="#6B7280" />
            </TouchableOpacity>
          </View>
        )}
      </TouchableOpacity>
    );
  };

  // ✅ EMPTY STATE
  const renderEmptyState = () => {
    const isAbaAtual = abaAtiva === 'atual';
    
    return (
      <View style={styles.emptyState}>
        <Ionicons name="barbell-outline" size={80} color="#D1D5DB" />
        <Text style={styles.emptyTitle}>
          {isAbaAtual ? 'Nenhuma rotina ativa' : 'Nenhuma rotina concluída'}
        </Text>
        <Text style={styles.emptySubtitle}>
          {isAbaAtual 
            ? 'Crie a primeira rotina personalizada para este aluno'
            : 'As rotinas concluídas aparecerão aqui quando finalizadas'
          }
        </Text>
        {isAbaAtual && (
          <TouchableOpacity style={styles.primaryButton} onPress={handleNovaRotina}>
            <Ionicons name="add" size={20} color="white" />
            <Text style={styles.primaryButtonText}>Criar Primeira Rotina</Text>
          </TouchableOpacity>
        )}
      </View>
    );
  };

  // ✅ LOADING - Só mostra loading se não tiver aluno E loading for true
  if (loading && !aluno) {
    return (
      <View style={styles.loadingContainer}>
        <Text style={styles.loadingText}>Carregando rotinas...</Text>
      </View>
    );
  }

  // ✅ ERROR STATE
  if (!aluno) {
    return (
      <View style={styles.errorContainer}>
        <Text style={styles.errorText}>Aluno não encontrado</Text>
        <TouchableOpacity 
          style={styles.backButton} 
          onPress={() => router.push('/(tabs)/alunos')}
        >
          <Text style={styles.backButtonText}>Voltar</Text>
        </TouchableOpacity>
      </View>
    );
  }

  return (
    <View style={styles.container}>
      {/* ✅ HEADER */}
      <View style={styles.header}>
        <TouchableOpacity 
          style={styles.headerBackButton}
          onPress={() => router.push('/(tabs)/alunos')}
        >
          <Ionicons name="arrow-back" size={24} color="#007AFF" />
        </TouchableOpacity>
        
        <Text style={styles.headerTitle}>Rotinas</Text>

        <TouchableOpacity style={styles.addButton} onPress={handleNovaRotina}>
          <Ionicons name="add" size={20} color="white" />
          <Text style={styles.addButtonText}>Nova</Text>
        </TouchableOpacity>
      </View>

      {/* ✅ INFO DO ALUNO */}
      <View style={styles.alunoInfo}>
        <Text style={styles.alunoNome}>{aluno.nome_completo}</Text>
        <Text style={styles.alunoEmail}>{aluno.email}</Text>
      </View>

      {/* ✅ CONTEÚDO */}
      <View style={styles.content}>
        {/* ✅ MENU DE ABAS */}
        <View style={styles.tabsContainer}>
          <TouchableOpacity
            style={[styles.tab, abaAtiva === 'atual' && styles.tabActive]}
            onPress={() => setAbaAtiva('atual')}
          >
            <Text style={[styles.tabText, abaAtiva === 'atual' && styles.tabTextActive]}>
              Atual
            </Text>
          </TouchableOpacity>
          <TouchableOpacity
            style={[styles.tab, abaAtiva === 'concluidas' && styles.tabActive]}
            onPress={() => setAbaAtiva('concluidas')}
          >
            <Text style={[styles.tabText, abaAtiva === 'concluidas' && styles.tabTextActive]}>
              Concluídas
            </Text>
          </TouchableOpacity>
        </View>

        {/* Contador apenas para aba de concluídas */}
        {abaAtiva === 'concluidas' && rotinasFiltradas.length > 0 && (
          <Text style={styles.contador}>
            {rotinasFiltradas.length} {rotinasFiltradas.length === 1 ? 'rotina' : 'rotinas'}
          </Text>
        )}

        {rotinasFiltradas.length === 0 ? (
          renderEmptyState()
        ) : (
          <FlatList
            data={rotinasFiltradas}
            renderItem={renderRotina}
            keyExtractor={(item) => item.id}
            refreshControl={
              <RefreshControl refreshing={refreshing} onRefresh={handleRefresh} />
            }
            showsVerticalScrollIndicator={false}
            contentContainerStyle={styles.listContainer}
          />
        )}
      </View>

      {/* ✅ MODAL DE ROTINA ATIVA */}
      {rotinaConflitante && (
        <RotinaAtivaModal
          visible={modals.rotinaAtiva}
          rotinaNome={rotinaConflitante.nome}
          rotinaStatus={rotinaConflitante.status}
          onViewRotina={handleViewRotinaAtiva}
          onCancel={handleCloseRotinaAtivaModal}
        />
      )}

      {/* ✅ MODAL DE ATIVAR ROTINA */}
      {rotinaParaAtivar && (
        <AtivarRotinaModal
          visible={modals.ativarRotina}
          rotinaNome={rotinaParaAtivar.nome}
          permiteExecucaoAluno={permiteExecucaoAluno}
          enviaResumoEmail={enviaResumoEmail}
          onPermiteExecucaoChange={setPermiteExecucaoAluno}
          onEnviaEmailChange={setEnviaResumoEmail}
          onConfirm={handleConfirmarAtivacao}
          onCancel={() => {
            closeModal('ativarRotina');
            setRotinaParaAtivar(null);
          }}
        />
      )}

      {/* ✅ MODAL DE OPÇÕES */}
      {rotinaComOpcoes && (
        <RotinaOptionsModal
          visible={modals.opcoes}
          status={rotinaComOpcoes.status}
          onClose={() => {
            closeModal('opcoes');
            setRotinaComOpcoes(null);
          }}
          onIrParaExecucao={handleIrParaExecucao}
          onVerEvolucao={handleVerEvolucao}
          onDuplicarRotina={handleDuplicarRotina}
        />
      )}

      {/* ✅ MODAL DE ERRO */}
      {errorModal && (
        <ErrorModal
          visible={modals.error}
          onClose={handleCloseError}
          title={errorModal.title}
          message={errorModal.message}
        />
      )}

      {/* ✅ MODAL DE SUCESSO */}
      {successModal && (
        <SuccessModal
          visible={modals.success}
          onClose={handleCloseSuccess}
          title={successModal.title}
          message={successModal.message}
        />
      )}

      {/* ✅ MODAL DE CONFIRMAÇÃO */}
      {confirmModal && (
        <ConfirmActionModal
          visible={modals.confirm}
          onClose={handleCloseConfirm}
          onConfirm={handleConfirmAction}
          title={confirmModal.title}
          message={confirmModal.message}
          confirmText={confirmModal.confirmText}
          destructive={confirmModal.destructive}
          loading={actionLoading}
        />
      )}
    </View>
  );
}

// ✅ STYLES
const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#F9FAFB',
  },
  
  // Header
  header: {
    backgroundColor: 'white',
    flexDirection: 'row',
    alignItems: 'center',
    paddingTop: 50,
    paddingHorizontal: 16,
    paddingBottom: 16,
    borderBottomWidth: 1,
    borderBottomColor: '#E5E7EB',
  },
  headerBackButton: {
    padding: 4,
  },
  headerTitle: {
    flex: 1,
    textAlign: 'center',
    fontSize: 18,
    fontWeight: '600',
    color: '#1F2937',
    marginHorizontal: 16,
  },
  addButton: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#007AFF',
    paddingHorizontal: 12,
    paddingVertical: 8,
    borderRadius: 8,
    gap: 4,
  },
  addButtonText: {
    color: 'white',
    fontSize: 14,
    fontWeight: '600',
  },

  // Info do aluno
  alunoInfo: {
    backgroundColor: 'white',
    padding: 16,
    borderBottomWidth: 1,
    borderBottomColor: '#E5E7EB',
  },
  alunoNome: {
    fontSize: 18,
    fontWeight: '600',
    color: '#1F2937',
    marginBottom: 4,
  },
  alunoEmail: {
    fontSize: 14,
    color: '#6B7280',
  },

  // Conteúdo
  content: {
    flex: 1,
    paddingHorizontal: 16,
    paddingTop: 16,
  },

  // Abas
  tabsContainer: {
    flexDirection: 'row',
    backgroundColor: '#F3F4F6',
    borderRadius: 8,
    padding: 4,
    marginBottom: 16,
  },
  tab: {
    flex: 1,
    paddingVertical: 8,
    paddingHorizontal: 12,
    borderRadius: 6,
    alignItems: 'center',
  },
  tabActive: {
    backgroundColor: 'white',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 2,
    elevation: 2,
  },
  tabText: {
    fontSize: 14,
    fontWeight: '500',
    color: '#6B7280',
  },
  tabTextActive: {
    color: '#007AFF',
    fontWeight: '600',
  },

  contador: {
    fontSize: 16,
    fontWeight: '600',
    color: '#374151',
    marginBottom: 16,
  },

  // Lista
  listContainer: {
    paddingBottom: 20,
  },

  // Card da rotina
  rotinaCard: {
    backgroundColor: 'white',
    borderRadius: 12,
    padding: 16,
    marginBottom: 12,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.05,
    shadowRadius: 3,
    elevation: 2,
  },
  statusRow: {
    marginBottom: 12,
  },
  rotinaNome: {
    fontSize: 18,
    fontWeight: '600',
    color: '#1F2937',
    marginBottom: 12,
  },
  rotinaInfo: {
    fontSize: 14,
    color: '#6B7280',
    marginBottom: 12,
  },
  statusBadge: {
    paddingHorizontal: 8,
    paddingVertical: 4,
    borderRadius: 6,
    alignSelf: 'flex-start',
  },
  statusText: {
    color: 'white',
    fontSize: 12,
    fontWeight: '600',
  },
  descricao: {
    fontSize: 14,
    color: '#6B7280',
    marginBottom: 12,
    lineHeight: 20,
  },
  acaoRow: {
    marginTop: 8,
    paddingTop: 12,
    borderTopWidth: 1,
    borderTopColor: '#F3F4F6',
  },

  // Ações da rotina
  ativarButton: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#007AFF',
    paddingHorizontal: 16,
    paddingVertical: 10,
    borderRadius: 8,
    gap: 6,
    flex: 1,
  },
  ativarButtonText: {
    color: 'white',
    fontSize: 14,
    fontWeight: '600',
  },
  botoesAcao: {
    flexDirection: 'row',
    gap: 8,
    flex: 1,
  },
  pausarButton: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#F59E0B',
    paddingHorizontal: 12,
    paddingVertical: 8,
    borderRadius: 6,
    gap: 4,
    flex: 1,
  },
  pausarButtonText: {
    color: 'white',
    fontSize: 12,
    fontWeight: '600',
  },
  excluirButton: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#EF4444',
    paddingHorizontal: 16,
    paddingVertical: 10,
    borderRadius: 8,
    gap: 6,
    flex: 1,
  },
  excluirButtonText: {
    color: 'white',
    fontSize: 14,
    fontWeight: '600',
  },
  optionsButton: {
    padding: 8,
    borderRadius: 6,
    backgroundColor: '#F3F4F6',
    alignItems: 'center',
    justifyContent: 'center',
    marginLeft: 8,
  },

  // Empty state
  emptyState: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    paddingHorizontal: 32,
  },
  emptyTitle: {
    fontSize: 20,
    fontWeight: '600',
    color: '#374151',
    textAlign: 'center',
    marginTop: 16,
    marginBottom: 8,
  },
  emptySubtitle: {
    fontSize: 16,
    color: '#6B7280',
    textAlign: 'center',
    marginBottom: 24,
    lineHeight: 24,
  },
  primaryButton: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#007AFF',
    paddingHorizontal: 24,
    paddingVertical: 12,
    borderRadius: 12,
    gap: 8,
  },
  primaryButtonText: {
    color: 'white',
    fontSize: 16,
    fontWeight: '600',
  },

  // Loading
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#F9FAFB',
  },
  loadingText: {
    fontSize: 16,
    color: '#6B7280',
  },

  // Error
  errorContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#F9FAFB',
    paddingHorizontal: 32,
  },
  errorText: {
    fontSize: 18,
    color: '#374151',
    textAlign: 'center',
    marginBottom: 24,
  },
  backButton: {
    backgroundColor: '#007AFF',
    paddingHorizontal: 20,
    paddingVertical: 10,
    borderRadius: 8,
  },
  backButtonText: {
    color: 'white',
    fontSize: 16,
    fontWeight: '600',
  },
});
