import { router } from 'expo-router';
import { useState } from 'react';
import { Alert } from 'react-native';
import { useOnboardingAluno } from '../../context/OnboardingAlunoContext';
import { supabase } from '../../lib/supabase';
import { useAvatarGenerator } from './useAvatarGenerator';

interface UseOnboardingSubmitReturn {
  loading: boolean;
  submitOnboarding: (userId: string, userEmail: string) => Promise<void>;
  canComplete: boolean;
}

interface UpdateData {
  nome_completo: string;
  genero: string;
  data_nascimento: string;
  telefone: string;
  peso: number | null;
  altura: number | null;
  descricao_pessoal: string;
  par_q_respostas: { [key: string]: boolean };
  avatar_letter: string;
  avatar_color: string;
  avatar_type: string;
  avatar_image_url: null;
  onboarding_completo: boolean;
  status: string;
}

/**
 * Hook para finaliza√ß√£o e envio do onboarding
 * Gerencia todo o processo de valida√ß√£o final e salvamento no banco
 */
export const useOnboardingSubmit = (): UseOnboardingSubmitReturn => {
  const [loading, setLoading] = useState(false);
  const { data, reset } = useOnboardingAluno();
  const { getAvatarData } = useAvatarGenerator();

  // Perguntas PAR-Q para valida√ß√£o
  const perguntasParQ = [
    'Seu m√©dico j√° disse que voc√™ possui algum problema card√≠aco e que s√≥ deve realizar atividade f√≠sica supervisionado por profissionais de sa√∫de?',
    'Voc√™ sente dores no peito quando realiza atividade f√≠sica?',
    'No √∫ltimo m√™s, voc√™ sentiu dores no peito mesmo sem praticar atividade f√≠sica?',
    'Voc√™ perde o equil√≠brio devido a tontura ou j√° perdeu a consci√™ncia alguma vez?',
    'Voc√™ possui algum problema √≥sseo ou articular que poderia piorar com a pr√°tica de atividade f√≠sica?',
    'Seu m√©dico j√° prescreveu algum medicamento para press√£o arterial ou problema card√≠aco?',
    'Voc√™ sabe de alguma outra raz√£o pela qual n√£o deveria praticar atividade f√≠sica?'
  ];

  /**
   * Converte data brasileira (dd/mm/aaaa) para formato ISO (yyyy-mm-dd)
   */
  const dateBRtoISO = (dateBR: string): string => {
    if (!dateBR || !/^\d{2}\/\d{2}\/\d{4}$/.test(dateBR)) return dateBR;
    const [day, month, year] = dateBR.split('/');
    return `${year}-${month}-${day}`;
  };

  /**
   * Converte valores decimais com v√≠rgula para ponto (formato PostgreSQL)
   */
  const formatDecimalForDatabase = (value: string): number | null => {
    if (!value || value.trim() === '') return null;
    
    const normalizedValue = value.replace(',', '.');
    const parsed = parseFloat(normalizedValue);
    
    return isNaN(parsed) ? null : parsed;
  };

  /**
   * Valida se todos os campos obrigat√≥rios est√£o preenchidos
   */
  const validateRequiredFields = (): boolean => {
    // Campos b√°sicos obrigat√≥rios
    const basicFieldsValid = !!(
      data.nomeCompleto &&
      data.genero &&
      data.dataNascimento &&
      data.descricaoPessoal && data.descricaoPessoal.trim().length >= 10
    );

    // Verificar se todas as 7 perguntas do PAR-Q foram respondidas
    const parQComplete = perguntasParQ.every((_, index) => 
      data.questionarioParQ[index.toString()] !== undefined
    );

    return basicFieldsValid && parQComplete;
  };

  /**
   * Propriedade computada para verificar se pode finalizar
   */
  const canComplete = validateRequiredFields();

  /**
   * Fun√ß√£o principal para submeter o onboarding
   */
  const submitOnboarding = async (userId: string, userEmail: string): Promise<void> => {
    if (!userId || !userEmail) {
      Alert.alert('Erro', 'Usu√°rio n√£o encontrado. Fa√ßa login novamente.');
      router.replace('/');
      return;
    }

    // Valida√ß√£o final antes de submeter
    if (!canComplete) {
      Alert.alert(
        'Campos obrigat√≥rios', 
        'Preencha todos os campos obrigat√≥rios:\n\n‚Ä¢ Nome completo\n‚Ä¢ G√™nero\n‚Ä¢ Data de nascimento\n‚Ä¢ Descri√ß√£o pessoal (m√≠nimo 10 caracteres)\n‚Ä¢ Question√°rio PAR-Q (todas as 7 perguntas)'
      );
      return;
    }

    setLoading(true);
    
    try {
      // Gerar dados do avatar
      const avatarData = getAvatarData(data.nomeCompleto, userEmail);
      
      console.log('üéØ [Onboarding] Iniciando submiss√£o para:', data.nomeCompleto);
      console.log('üì∏ [Onboarding] Avatar gerado:', avatarData.letter);

      // Preparar dados para o banco
      const updateData: UpdateData = {
        nome_completo: data.nomeCompleto,
        genero: data.genero,
        data_nascimento: dateBRtoISO(data.dataNascimento),
        telefone: data.telefone,
        peso: formatDecimalForDatabase(data.peso),
        altura: formatDecimalForDatabase(data.altura),
        descricao_pessoal: data.descricaoPessoal,
        par_q_respostas: data.questionarioParQ,
        
        // Dados do avatar
        avatar_letter: avatarData.letter,
        avatar_color: avatarData.color,
        avatar_type: avatarData.type,
        avatar_image_url: avatarData.imageUrl,
        
        // Status final
        onboarding_completo: true,
        status: 'ativo' // Muda de "pendente" para "ativo"
      };

      console.log('üíæ [Onboarding] Salvando dados no Supabase...');

      // Salvar no banco de dados
      const { error, data: result } = await supabase
        .from('alunos')
        .update(updateData)
        .eq('id', userId)
        .select();

      if (error) {
        console.error('‚ùå [Onboarding] Erro na atualiza√ß√£o:', error);
        throw error;
      }

      if (!result || result.length === 0) {
        console.error('‚ùå [Onboarding] Nenhum registro atualizado');
        throw new Error('Nenhum registro foi atualizado');
      }

      console.log('‚úÖ [Onboarding] Dados salvos com sucesso!');
      console.log('üìä [Onboarding] Resultado:', result[0]);

      // Limpar dados do contexto
      reset();

      // Redirecionar para dashboard do aluno
      console.log('üîÑ [Onboarding] Redirecionando para dashboard...');
      router.replace('/(tabs)/index-aluno' as never);

    } catch (error) {
      console.error('üí• [Onboarding] Erro no processo:', error);
      
      const errorMessage = error instanceof Error ? error.message : 'Erro desconhecido';
      
      Alert.alert(
        'Erro', 
        `N√£o foi poss√≠vel finalizar a configura√ß√£o:\n${errorMessage}\n\nTente novamente.`
      );
    } finally {
      setLoading(false);
    }
  };

  return {
    loading,
    submitOnboarding,
    canComplete
  };
};